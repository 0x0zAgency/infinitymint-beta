//this file is auto-generated by the InfinityMint CLI
    //do not modify this file directly
    import { InfinityMintScript, InfinityMintScriptArguments } from '@app/interfaces';
    export interface CallArguments extends InfinityMintScriptArguments {
}

export interface CallScript extends InfinityMintScript {
    arguments?: CallArguments[];
}

export const Call: CallScript = {
    "name": "Call Contract Method",
    "description": "Calls a method on a contract",
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": true
        },
        {
            "name": "contract",
            "type": "string",
            "optional": true
        },
        {
            "name": "method",
            "type": "string",
            "optional": true
        },
        {
            "name": "module",
            "type": "string",
            "optional": true
        }
    ],
    "fileName": "call.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/call.ts"
};

export interface CompileProjectArguments extends InfinityMintScriptArguments {
}

export interface CompileProjectScript extends InfinityMintScript {
    arguments?: CompileProjectArguments[];
}

export const CompileProject: CompileProjectScript = {
    "name": "Compile",
    "description": "Compile an InfinityMint project ready for deployment. The compiled file will garuntee that all the assets used in the minter are uploaded to IPFS and accessible at all times.",
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": true
        },
        {
            "name": "uploadBundle",
            "type": "boolean",
            "value": true,
            "optional": true
        },
        {
            "name": "continuePrevious",
            "type": "boolean",
            "value": true,
            "optional": true
        },
        {
            "name": "recompile",
            "type": "boolean",
            "value": false,
            "optional": true
        }
    ],
    "fileName": "compileProject.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/compileProject.ts"
};

export interface ConvertProjectArguments extends InfinityMintScriptArguments {
}

export interface ConvertProjectScript extends InfinityMintScript {
    arguments?: ConvertProjectArguments[];
}

export const ConvertProject: ConvertProjectScript = {
    "name": "Convert Project",
    "description": "Converts a deployed project to a source file",
    "arguments": [],
    "fileName": "convertProject.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/convertProject.ts"
};

export interface DeployContractArguments extends InfinityMintScriptArguments {
}

export interface DeployContractScript extends InfinityMintScript {
    arguments?: DeployContractArguments[];
}

export const DeployContract: DeployContractScript = {
    "name": "DeployContract",
    "description": "Deploy a contract to the current network, the deployment will be saved in the __@any folder in the deployments folder (relative to your network)",
    "arguments": [
        {
            "name": "contractName",
            "type": "string",
            "optional": false
        }
    ],
    "fileName": "deployContract.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/deployContract.ts"
};

export interface DeployProjectArguments extends InfinityMintScriptArguments {
}

export interface DeployProjectScript extends InfinityMintScript {
    arguments?: DeployProjectArguments[];
}

export const DeployProject: DeployProjectScript = {
    "name": "Deploy",
    "description": "Deploys InfinityMint or a specific InfinityMint contract related to the current project",
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": true
        },
        {
            "name": "redeploy",
            "type": "boolean",
            "value": false,
            "optional": true
        },
        {
            "name": "setPipe",
            "type": "boolean",
            "optional": true,
            "value": true
        }
    ],
    "fileName": "deployProject.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/deployProject.ts"
};

export interface DownloadBundleArguments extends InfinityMintScriptArguments {
}

export interface DownloadBundleScript extends InfinityMintScript {
    arguments?: DownloadBundleArguments[];
}

export const DownloadBundle: DownloadBundleScript = {
    "name": "Download Bundle",
    "description": "Attempts to pull information from an address about an InfinityMint",
    "arguments": [],
    "fileName": "downloadBundle.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/downloadBundle.ts"
};

export interface ExportProjectArguments extends InfinityMintScriptArguments {
}

export interface ExportProjectScript extends InfinityMintScript {
    arguments?: ExportProjectArguments[];
}

export const ExportProject: ExportProjectScript = {
    "name": "Export",
    "description": "Exports a project to the specified location, will copy over styles, gems and anything else relating to the project",
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": true
        },
        {
            "name": "location",
            "type": "string",
            "optional": true
        },
        {
            "name": "exportScript",
            "type": "string",
            "optional": true
        },
        {
            "name": "useBundle",
            "type": "boolean",
            "value": true,
            "optional": true
        },
        {
            "name": "requireInClient",
            "type": "boolean",
            "value": true,
            "optional": true
        },
        {
            "name": "setAsDefault",
            "type": "boolean",
            "value": false,
            "optional": true
        },
        {
            "name": "useGems",
            "type": "boolean",
            "optional": true
        },
        {
            "name": "publicFolder",
            "type": "string",
            "optional": true,
            "value": "public"
        },
        {
            "name": "ignorePublic",
            "type": "boolean",
            "optional": true
        }
    ],
    "fileName": "exportProject.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/exportProject.ts"
};

export interface FetchImportsArguments extends InfinityMintScriptArguments {
}

export interface FetchImportsScript extends InfinityMintScript {
    arguments?: FetchImportsArguments[];
}

export const FetchImports: FetchImportsScript = {
    "name": "Fetch Imports Using IPFS",
    "description": "Fetches imports relating to a project  and write them to a destination or your current repository. The project must have uploaded its resources to IPFS",
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": true
        },
        {
            "name": "network",
            "type": "string",
            "optional": true
        },
        {
            "name": "version",
            "type": "string",
            "optional": true
        },
        {
            "name": "force",
            "type": "boolean",
            "optional": true
        },
        {
            "name": "destination",
            "type": "string",
            "optional": true
        },
        {
            "name": "useCompiled",
            "type": "boolean",
            "optional": true
        }
    ],
    "fileName": "fetchImports.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/fetchImports.ts"
};

export interface FetchProjectArguments extends InfinityMintScriptArguments {
}

export interface FetchProjectScript extends InfinityMintScript {
    arguments?: FetchProjectArguments[];
}

export const FetchProject: FetchProjectScript = {
    "name": "Fetch Project",
    "description": "Attempts to fetch a project from an InfinityMint project contract",
    "arguments": [
        {
            "name": "contractDestination",
            "type": "string",
            "optional": false
        },
        {
            "name": "force",
            "type": "boolean",
            "optional": true
        }
    ],
    "fileName": "fetchProject.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/fetchProject.ts"
};

export interface GenerateTypeExtensionsArguments extends InfinityMintScriptArguments {
}

export interface GenerateTypeExtensionsScript extends InfinityMintScript {
    arguments?: GenerateTypeExtensionsArguments[];
}

export const GenerateTypeExtensions: GenerateTypeExtensionsScript = {
    "name": "Generate Type Extensions",
    "description": "Generates type extensions for the current InfinityMint",
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": true
        }
    ],
    "fileName": "generateTypeExtensions.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/generateTypeExtensions.ts"
};

export interface GetTokenArguments extends InfinityMintScriptArguments {
}

export interface GetTokenScript extends InfinityMintScript {
    arguments?: GetTokenArguments[];
}

export const GetToken: GetTokenScript = {
    "name": "Get Token",
    "description": "Pulls information about a token from the blockchain and displays it",
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": true
        },
        {
            "name": "tokenId",
            "type": "number",
            "optional": false
        }
    ],
    "fileName": "getToken.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/getToken.ts"
};

export interface MakeArguments extends InfinityMintScriptArguments {
}

export interface MakeScript extends InfinityMintScript {
    arguments?: MakeArguments[];
}

export const Make: MakeScript = {
    "name": "Make",
    "description": "Will compile and deploy your project to the current network and then export it",
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": true
        },
        {
            "name": "enableMinter",
            "type": "boolean",
            "optional": true
        },
        {
            "name": "recompile",
            "type": "boolean",
            "optional": true,
            "value": false
        },
        {
            "name": "dontExport",
            "type": "boolean",
            "optional": true
        },
        {
            "name": "report",
            "type": "boolean",
            "optional": true,
            "value": false
        },
        {
            "name": "recompile",
            "type": "boolean",
            "optional": true,
            "value": false
        },
        {
            "name": "publicFolder",
            "type": "string",
            "optional": true,
            "value": "public"
        },
        {
            "name": "redeploy",
            "type": "boolean",
            "optional": true,
            "value": false
        },
        {
            "name": "location",
            "type": "string",
            "optional": true
        },
        {
            "name": "exportScript",
            "type": "string",
            "optional": true,
            "value": "default"
        },
        {
            "name": "useBundle",
            "type": "boolean",
            "optional": true,
            "value": true
        },
        {
            "name": "useGems",
            "type": "boolean",
            "optional": true
        }
    ],
    "fileName": "make.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/make.ts"
};

export interface MergeDeploymentsArguments extends InfinityMintScriptArguments {
}

export interface MergeDeploymentsScript extends InfinityMintScript {
    arguments?: MergeDeploymentsArguments[];
}

export const MergeDeployments: MergeDeploymentsScript = {
    "name": "Merge Deployments",
    "description": "Merges a directory of deployments into a new deployed project.",
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": true
        },
        {
            "name": "target",
            "type": "string",
            "optional": false
        },
        {
            "name": "network",
            "type": "string",
            "optional": true
        },
        {
            "name": "chainId",
            "type": "string",
            "optional": true
        },
        {
            "name": "newVersion",
            "type": "boolean",
            "optional": true
        }
    ],
    "fileName": "mergeDeployments.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/mergeDeployments.ts"
};

export interface MintArguments extends InfinityMintScriptArguments {
}

export interface MintScript extends InfinityMintScript {
    arguments?: MintArguments[];
}

export const Mint: MintScript = {
    "name": "Mint",
    "description": "Mints a new InfinityMint NFT",
    "config": {
        "mint": {
            "mintChunkSize": 8
        }
    },
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": true
        },
        {
            "name": "useImplicitMint",
            "type": "boolean",
            "optional": true,
            "value": false
        },
        {
            "name": "gasLimit",
            "type": "number",
            "optional": true
        },
        {
            "name": "count",
            "type": "number",
            "optional": true,
            "value": 1
        },
        {
            "name": "to",
            "type": "string",
            "optional": true
        }
    ],
    "fileName": "mint.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/mint.ts"
};

export interface NetworkArguments extends InfinityMintScriptArguments {
}

export interface NetworkScript extends InfinityMintScript {
    arguments?: NetworkArguments[];
}

export const Network: NetworkScript = {
    "name": "Network",
    "description": "Displays the current working network",
    "arguments": [],
    "fileName": "network.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/network.ts"
};

export interface ProjectArguments extends InfinityMintScriptArguments {
}

export interface ProjectScript extends InfinityMintScript {
    arguments?: ProjectArguments[];
}

export const Project: ProjectScript = {
    "name": "Project",
    "description": "Displays the current working project",
    "arguments": [],
    "fileName": "project.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/project.ts"
};

export interface RebuildImportsArguments extends InfinityMintScriptArguments {
}

export interface RebuildImportsScript extends InfinityMintScript {
    arguments?: RebuildImportsArguments[];
}

export const RebuildImports: RebuildImportsScript = {
    "name": "Rebuild Imports",
    "description": "Rebuilds your import cache which contains references to all the files you are using through out InfinityMint",
    "arguments": [],
    "fileName": "rebuildImports.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/rebuildImports.ts"
};

export interface ReportArguments extends InfinityMintScriptArguments {
}

export interface ReportScript extends InfinityMintScript {
    arguments?: ReportArguments[];
}

export const Report: ReportScript = {
    "name": "View Report",
    "description": "View a report of your project deployment",
    "arguments": [
        {
            "name": "project",
            "optional": true
        },
        {
            "name": "network",
            "optional": true
        }
    ],
    "fileName": "report.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/report.ts"
};

export interface RestoreProjectArguments extends InfinityMintScriptArguments {
}

export interface RestoreProjectScript extends InfinityMintScript {
    arguments?: RestoreProjectArguments[];
}

export const RestoreProject: RestoreProjectScript = {
    "name": "Restore Project",
    "description": "Takes a source project file. Will attempt to fetch the project from a contract location, then unpack its deployments to your deployments folder",
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": true
        }
    ],
    "fileName": "restoreProject.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/restoreProject.ts"
};

export interface SetLocationArguments extends InfinityMintScriptArguments {
}

export interface SetLocationScript extends InfinityMintScript {
    arguments?: SetLocationArguments[];
}

export const SetLocation: SetLocationScript = {
    "name": "Set Export Location",
    "description": "Sets the export location of the current working project",
    "arguments": [
        {
            "name": "location",
            "type": "string",
            "optional": true
        },
        {
            "name": "project",
            "type": "string",
            "optional": true
        }
    ],
    "fileName": "setLocation.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/setLocation.ts"
};

export interface SetNetworkArguments extends InfinityMintScriptArguments {
}

export interface SetNetworkScript extends InfinityMintScript {
    arguments?: SetNetworkArguments[];
}

export const SetNetwork: SetNetworkScript = {
    "name": "Set Current Target Network",
    "description": "Sets the current target network, this is the default network which you will deploy too and read information from",
    "arguments": [
        {
            "name": "network",
            "type": "string",
            "optional": false
        }
    ],
    "fileName": "setNetwork.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/setNetwork.ts"
};

export interface SetProjectArguments extends InfinityMintScriptArguments {
}

export interface SetProjectScript extends InfinityMintScript {
    arguments?: SetProjectArguments[];
}

export const SetProject: SetProjectScript = {
    "name": "Set Current Project",
    "description": "Sets the current working project",
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": false
        }
    ],
    "fileName": "setProject.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/setProject.ts"
};

export interface SetupProjectArguments extends InfinityMintScriptArguments {
}

export interface SetupProjectScript extends InfinityMintScript {
    arguments?: SetupProjectArguments[];
}

export const SetupProject: SetupProjectScript = {
    "name": "Setup/Relaunch Project",
    "description": "Will resetup your project, calling clean up methods on all the deployments contained in the project and then reinitializing them on the block chain",
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": true
        }
    ],
    "fileName": "setupProject.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/setupProject.ts"
};

export interface UnpackDeploymentsArguments extends InfinityMintScriptArguments {
}

export interface UnpackDeploymentsScript extends InfinityMintScript {
    arguments?: UnpackDeploymentsArguments[];
}

export const UnpackDeployments: UnpackDeploymentsScript = {
    "name": "Unpack Deployments",
    "description": "Attempts to unpack all deployments in the project to a folder",
    "arguments": [
        {
            "name": "project",
            "type": "string",
            "optional": true
        },
        {
            "name": "destination",
            "type": "string",
            "optional": true
        },
        {
            "name": "network",
            "type": "string",
            "optional": true
        },
        {
            "name": "version",
            "type": "string",
            "optional": true
        }
    ],
    "fileName": "unpackDeployments.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/unpackDeployments.ts"
};

export interface UpdateProjectArguments extends InfinityMintScriptArguments {
}

export interface UpdateProjectScript extends InfinityMintScript {
    arguments?: UpdateProjectArguments[];
}

export const UpdateProject: UpdateProjectScript = {
    "name": "Update",
    "description": "Updates a project by reading any changes which have occured and then setting them on chain",
    "arguments": [
        {
            "name": "project",
            "optional": true
        }
    ],
    "fileName": "updateProject.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/updateProject.ts"
};

export interface UploadProjectArguments extends InfinityMintScriptArguments {
}

export interface UploadProjectScript extends InfinityMintScript {
    arguments?: UploadProjectArguments[];
}

export const UploadProject: UploadProjectScript = {
    "name": "Upload",
    "description": "Builds and then uploads to IPFS directory an InfinityMint build ready to be set as a the content record of an ENS",
    "arguments": [
        {
            "name": "project",
            "optional": true
        }
    ],
    "fileName": "uploadProject.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/uploadProject.ts"
};

export interface VersionArguments extends InfinityMintScriptArguments {
}

export interface VersionScript extends InfinityMintScript {
    arguments?: VersionArguments[];
}

export const Version: VersionScript = {
    "name": "Version",
    "description": "Displays the current infinitymint version",
    "arguments": [],
    "fileName": "version.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/version.ts"
};

export interface WhoisArguments extends InfinityMintScriptArguments {
}

export interface WhoisScript extends InfinityMintScript {
    arguments?: WhoisArguments[];
}

export const Whois: WhoisScript = {
    "name": "WHOIS",
    "description": "Attempts to pull information from an address about an InfinityMint",
    "arguments": [],
    "fileName": "whois.ts",
    "path": "/Users/llydiacross/Sources/infinitymint-beta/scripts/whois.ts"
};

